// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/file/download/{fileId}": {
            "get": {
                "description": "download file",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "Download file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File id",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.CustomError"
                        }
                    }
                }
            }
        },
        "/file/upload": {
            "post": {
                "description": "upload file",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "Upload file",
                "parameters": [
                    {
                        "description": "File data",
                        "name": "payload",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/get.FileDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/minio.UploadInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.CustomError"
                        }
                    }
                }
            }
        },
        "/form/generated/get/{publishedId}": {
            "post": {
                "description": "get current user form",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FormGenerated"
                ],
                "summary": "Get current user form",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Published id",
                        "name": "publishedId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get.FormGeneratedDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.CustomError"
                        }
                    }
                }
            }
        },
        "/form/generated/save/{generatedId}": {
            "post": {
                "description": "save answers for current form",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FormGenerated"
                ],
                "summary": "Save answers for current form",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generated id",
                        "name": "generatedId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get.FormGeneratedDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.CustomError"
                        }
                    }
                }
            }
        },
        "/form/generated/submit/{generatedId}": {
            "post": {
                "description": "submit current form for evaluation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FormGenerated"
                ],
                "summary": "Submit current form for evaluation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generated id",
                        "name": "generatedId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get.MyGeneratedDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.CustomError"
                        }
                    }
                }
            }
        },
        "/form/generated/verify/{generatedId}": {
            "post": {
                "description": "evaluate users form manually",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FormGenerated"
                ],
                "summary": "Evaluate users form manually",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generated id",
                        "name": "generatedId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get.FormGeneratedDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.CustomError"
                        }
                    }
                }
            }
        },
        "/form/pattern/create": {
            "post": {
                "description": "create form pattern",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FormPattern"
                ],
                "summary": "Create form pattern",
                "parameters": [
                    {
                        "description": "Form data",
                        "name": "payload",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/create.FormPatternDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get.FormPatternDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.CustomError"
                        }
                    }
                }
            }
        },
        "/form/pattern/get/{patternId}": {
            "get": {
                "description": "get form pattern",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FormPattern"
                ],
                "summary": "Get form pattern",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pattern id",
                        "name": "patternId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get.FormPatternDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.CustomError"
                        }
                    }
                }
            }
        },
        "/form/published/create": {
            "post": {
                "description": "publish form",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FormPublished"
                ],
                "summary": "Publish form",
                "parameters": [
                    {
                        "description": "Form data",
                        "name": "payload",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/create.FormPublishDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get.FormPublishedBaseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.CustomError"
                        }
                    }
                }
            }
        },
        "/form/published/delete/{publishedId}": {
            "delete": {
                "description": "delete form",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FormPublished"
                ],
                "summary": "Delete form",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Published id",
                        "name": "publishedId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.CustomError"
                        }
                    }
                }
            }
        },
        "/form/published/get/{publishedId}": {
            "get": {
                "description": "get form",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FormPublished"
                ],
                "summary": "Get form",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Published id",
                        "name": "publishedId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get.FormPublishedDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.CustomError"
                        }
                    }
                }
            }
        },
        "/form/published/update/{publishedId}": {
            "put": {
                "description": "update form",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FormPublished"
                ],
                "summary": "Update form",
                "parameters": [
                    {
                        "description": "New form data",
                        "name": "payload",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/create.UpdateFormPublishedDto"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Published id",
                        "name": "publishedId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get.FormPublishedDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.CustomError"
                        }
                    }
                }
            }
        },
        "/question/create/{subjectId}": {
            "post": {
                "description": "create question",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Question"
                ],
                "summary": "Create question",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subject id",
                        "name": "subjectId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get.QuestionDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.CustomError"
                        }
                    }
                }
            }
        },
        "/question/delete/{questionId}": {
            "delete": {
                "description": "delete question",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Question"
                ],
                "summary": "Delete question",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Question id",
                        "name": "questionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.CustomError"
                        }
                    }
                }
            }
        },
        "/question/get/{questionId}": {
            "get": {
                "description": "get question",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Question"
                ],
                "summary": "Get question",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Question id",
                        "name": "questionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get.QuestionDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errs.CustomError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "block.BlockType": {
            "type": "string",
            "enum": [
                "STATIC",
                "DYNAMIC",
                "EXISTING"
            ],
            "x-enum-varnames": [
                "STATIC",
                "DYNAMIC",
                "EXISTING"
            ]
        },
        "common.MarkConfiguration": {
            "type": "object",
            "additionalProperties": {
                "type": "integer"
            }
        },
        "create.FormPatternDto": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "sections": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "subjectId": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "create.FormPublishDto": {
            "type": "object",
            "properties": {
                "deadline": {
                    "type": "string"
                },
                "duration": {
                    "$ref": "#/definitions/time.Duration"
                },
                "formPatternId": {
                    "type": "string"
                },
                "hideScore": {
                    "type": "boolean"
                },
                "markConfiguration": {
                    "$ref": "#/definitions/common.MarkConfiguration"
                },
                "maxAttempts": {
                    "type": "integer"
                },
                "postModeration": {
                    "type": "boolean"
                },
                "teamIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "create.UpdateFormPublishedDto": {
            "type": "object",
            "properties": {
                "deadline": {
                    "type": "string"
                },
                "duration": {
                    "$ref": "#/definitions/time.Duration"
                },
                "hideScore": {
                    "type": "boolean"
                },
                "markConfiguration": {
                    "$ref": "#/definitions/common.MarkConfiguration"
                },
                "teamIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "errs.CustomError": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "generated.Block": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/block.BlockType"
                },
                "variant": {
                    "$ref": "#/definitions/generated.Variant"
                }
            }
        },
        "generated.FormStatus": {
            "type": "string",
            "enum": [
                "NEW",
                "IN_PROGRESS",
                "RETURNED",
                "SUBMITTED",
                "COMPLETED"
            ],
            "x-enum-varnames": [
                "NEW",
                "IN_PROGRESS",
                "RETURNED",
                "SUBMITTED",
                "COMPLETED"
            ]
        },
        "generated.Section": {
            "type": "object",
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/generated.Block"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "generated.Variant": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "get.FileDto": {
            "type": "object",
            "properties": {
                "file": {
                    "$ref": "#/definitions/multipart.FileHeader"
                }
            }
        },
        "get.FormGeneratedDto": {
            "type": "object",
            "properties": {
                "formPublished": {
                    "$ref": "#/definitions/get.FormPublishedBaseDto"
                },
                "id": {
                    "type": "string"
                },
                "sections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/generated.Section"
                    }
                },
                "status": {
                    "$ref": "#/definitions/generated.FormStatus"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "get.FormPatternDto": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ownerId": {
                    "$ref": "#/definitions/uuid.NullUUID"
                },
                "sections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/get.SectionDto"
                    }
                },
                "subject": {
                    "$ref": "#/definitions/get.SubjectDto"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "get.FormPublishedBaseDto": {
            "type": "object",
            "properties": {
                "deadline": {
                    "type": "string"
                },
                "duration": {
                    "$ref": "#/definitions/time.Duration"
                },
                "formPatternId": {
                    "type": "string"
                },
                "hideScore": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "markConfiguration": {
                    "$ref": "#/definitions/common.MarkConfiguration"
                },
                "maxAttempts": {
                    "type": "integer"
                },
                "teamIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "get.FormPublishedDto": {
            "type": "object",
            "properties": {
                "deadline": {
                    "type": "string"
                },
                "duration": {
                    "$ref": "#/definitions/time.Duration"
                },
                "formPattern": {
                    "$ref": "#/definitions/get.FormPatternDto"
                },
                "hideScore": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "teamIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "get.MyGeneratedDto": {
            "type": "object",
            "properties": {
                "formPublished": {
                    "$ref": "#/definitions/get.FormPublishedBaseDto"
                },
                "id": {
                    "type": "string"
                },
                "mark": {
                    "type": "integer"
                },
                "points": {
                    "description": "SubmitTime    time.Time            ` + "`" + `json:\"submitTime\"` + "`" + `",
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/generated.FormStatus"
                }
            }
        },
        "get.QuestionDto": {
            "type": "object",
            "properties": {
                "attachments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ownerId": {
                    "$ref": "#/definitions/uuid.NullUUID"
                },
                "subject": {
                    "$ref": "#/definitions/get.SubjectDto"
                },
                "type": {
                    "$ref": "#/definitions/question.QuestionType"
                }
            }
        },
        "get.SectionDto": {
            "type": "object",
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {}
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "get.SubjectDto": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "minio.UploadInfo": {
            "type": "object",
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "checksumCRC32": {
                    "description": "Verified checksum values, if any.\nValues are base64 (standard) encoded.\nFor multipart objects this is a checksum of the checksum of each part.",
                    "type": "string"
                },
                "checksumCRC32C": {
                    "type": "string"
                },
                "checksumCRC64NVME": {
                    "type": "string"
                },
                "checksumSHA1": {
                    "type": "string"
                },
                "checksumSHA256": {
                    "type": "string"
                },
                "etag": {
                    "type": "string"
                },
                "expiration": {
                    "description": "Lifecycle expiry-date and ruleID associated with the expiry\nnot to be confused with ` + "`" + `Expires` + "`" + ` HTTP header.",
                    "type": "string"
                },
                "expirationRuleID": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "lastModified": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "versionID": {
                    "type": "string"
                }
            }
        },
        "multipart.FileHeader": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/textproto.MIMEHeader"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "question.QuestionType": {
            "type": "string",
            "enum": [
                "MULTIPLE_CHOICE",
                "SINGLE_CHOICE",
                "MATCHING",
                "TEXT_INPUT",
                "EXISTING"
            ],
            "x-enum-varnames": [
                "MULTIPLE_CHOICE",
                "SINGLE_CHOICE",
                "MATCHING",
                "TEXT_INPUT",
                "EXISTING"
            ]
        },
        "textproto.MIMEHeader": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        },
        "time.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        },
        "uuid.NullUUID": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if UUID is not NULL",
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.01",
	Host:             "localhost:8001",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Forms API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
